openapi: 3.0.0
info:
  title: bci-market
  version: 0.7.0
  contact:
    name: Jarno Rankinen
    email: t8raja03@students.oamk.fi
  description: |-
    Building Cloud Integration, spring 2021, graded exercise
    Rankinen Jarno TVT19KMO

    This is an API for an imaginary online marketplace like eBay or Tori.fi. The requirements for the assignment are:
    - User registration and login (`POST /users` and `GET /users/login`)
    - Posting new items for sale (`POST /items`)
    - Modify postings (`POST /items/:idItem`)
    - Delete postings (`DELETE /items/:idItem`)
    - List and search items with categories: (`GET /items?category=xxx&location=yyy&date=zzz`)
    - Upload max 4 images of the item (`POST /upload/:idItem`)

    User registration and item listing/searching do not require authentication.
    Posting, modifying and deleting requires logging in via `GET /user/login`
servers:
  - url: 'http://portforward.ipt.oamk.fi:42010'
    description: public deployment
paths:
  /users:
    post:
      summary: Register a user
      operationId: userRegister
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
              examples:
                example-1:
                  value:
                    status: 201
                    message: User registered succesfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
              examples:
                example-1:
                  value:
                    status: 400
                    message: Invalid request
      description: |-
        Register a new user.

        In the request body, only `email` and `password` fields are required. `idUser`, `dateCreated` and `dateModified` are generated automatically and are not required.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              users-post-example-1:
                value:
                  firstName: Donald
                  lastName: Duck
                  email: dd@duckburg.com
                  tel: '5553131'
                  password: veryStrongAndComplexPassword
              users-post-example-2:
                value:
                  email: private@burner.email.com
                  password: dös9823OPFASNå09umsdv
        description: ''
    parameters: []
  /users/login:
    get:
      summary: Authenticate a user to the API
      tags: []
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Java Web Token for authentication
                  idUser:
                    type: string
                    description: idUser of the logged in user
              examples:
                login-example-1:
                  value:
                    token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImVtYWlsIjoib2xsaS5vc3RhamFAcG9zdGkuY29tIiwiaWRVc2VyIjowfSwiaWF0IjoxNjEzODQ1NDc3LCJleHAiOjE2MTM4NzQyNzd9.0j7AjXmGtpPaOiZgiOkA9dtmIOeSqG3LRtLPfCqoIjk
                    idUser: yJhbGciOiJIUzI1NiIsInR5cCI6IkpX=
          headers: {}
        '401':
          description: Unauthorized
          content:
            application/json:

              schema: {}
              examples:
                example-1:
                  value:
                    status: 0
                    message: string
      operationId: userLogin
      description: |-
        Get authentication token from server.

        Uses HTTP Basic authentication, username is the user's email and password the user's password.

        If the email & password are not valid, a 401 response with no body is returned.

              schema:
                $ref: '#/components/schemas/Status'
      operationId: login
      description: Get authentication token from server

      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Basic <base64_string>
          required: true
    parameters: []
  '/users/{idUser}':
    parameters:
      - schema:
          type: string
        name: idUser
        in: path
        required: true
        description: idUser of a user
    get:
      summary: Show user information
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example-1:
                  value:
                    idUser: 0
                    firstName: string
                    lastName: string
                    email: string
                    dateCreated: 0
                    dateModified: 0
                    tel: string
                    password: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'

              examples:
                example-1:
                  value:
                    status: 401
                    message: You are only authorized to view your own user information
      operationId: userInfo
      description: |-
        Get the information of the logged in user.

        Requires JWT authentication token. The user is only able to view his/her own information.

        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      operationId: userInfo
      description: Get the information of a specific user

      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Bearer token
          required: true
  '/users/{idUser}/items':
    parameters:
      - schema:
          type: string
        name: idUser
        in: path
        required: true
        description: idUser of the user which items are fetched
    get:
      summary: Show a users posted items
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
              examples:
                example-1:
                  value:
                    - idItem: YjJ4c2FTNXZjM1JoYW1GQWNHOXpkR2t1WTI5dEEgcGFpbnRpbmc=
                      title: A painting
                      description: A beatiful painting of the ocean floor
                      category: Art
                      location: Strasbourg
                      askingPrice: 2000
                      datePosted: 1613647147
                      dateModified: 1613647147
                      canShip: false
                      idUser: 0
                    - idItem: YjJ4c2FTNXZjM1JoYW1GQWNHOXpkR2t1WTI5dEEgZG9nJ3MgY29sbGFy
                      title: A dog's collar
                      description: Very good leather collar.
                      category: Clothing
                      location: Oulu
                      askingPrice: 5
                      datePosted: 1613654161
                      dateModified: 1613654161
                      canShip: true
                      idUser: 0
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'

              examples:
                example-1:
                  value:
                    status: 401
                    message: You are only authorized to see your own items filtered by user
      operationId: userItems
      description: List all postings of a user identified by idUser. A user can only see his/her own posted items via this route.
=======
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      operationId: userItems
      description: List all postings of a user identified by idUser

      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Bearer token
          required: true
  '/items/{idItem}':
    parameters:
      - schema:
          type: string
        name: idItem
        in: path
        required: true
        description: idItem of the user's item
    put:
      summary: Modify or delete an item
      operationId: itemModify
      summary: Modify an item information
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      description: |-
        Update the information of an item posted by logged in user.
        Only the fields that are to be updated are required in the request body.
        `dateModified` will be updated automatically.
        `idItem`, `datePosted` and `idUser` should not be in the request body, if they are, it will have no effect.
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Bearer token
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
            examples:
              modify-item-example1:
                value:
                  title: This title has been modified
                  askingPrice: 10
                  canShip: true
              modify-item-example-2:
                value:
                  title: A replacement title
                  description: This item has had all it's fields changed
                  category: Clothing
                  location: Oslo
                  askingPrice: 1000
                  canShip: false
    delete:
      summary: ''
      operationId: itemDelete
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Bearer token
      description: Delete an item posted by logged in user
  /items:
    get:
      summary: List items for sale
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
              examples:
                get-items-200:
                  value:
                    - idItem: 0
                      title: 'Opel Corsa, good condition'
                      description: 'Opel Corsa m.y. 1998, must be inspected until the end of the month'
                      category: Cars
                      location: Rovaniemi
                      askingPrice: 200
                      datePosted: 1613592071
                      dateModified: 1613592071
                      canShip: false
                      idUser: 1
                    - idItem: 1
                      title: A painting
                      description: A beatiful painting of the ocean floor
                      category: Art
                      location: Strasbourg
                      askingPrice: 2000
                      datePosted: 1613647147
                      dateModified: 1613647147
                      canShip: false
                      idUser: 0
                    - idItem: 2
                      title: Children's winter overalls
                      description: 'A very thick overall for children under 90cm. Holes only in the knees, elbows and sitting area.'
                      category: Clothing
                      location: Oslo
                      askingPrice: 50
                      datePosted: 1613654361
                      dateModified: 1613654361
                      canShip: true
                      idUser: 1
                    - idItem: 3
                      title: A dog's collar
                      description: Very good leather collar.
                      category: Clothing
                      location: Oulu
                      askingPrice: 5
                      datePosted: 1613654161
                      dateModified: 1613654161
                      canShip: true
                      idUser: 0
                    - idItem: 4
                      title: Fiat Punto 2014 16 valve
                      description: Good car. Small car. Leaks oil slightly.
                      category: Cars
                      location: Strasborough
                      askingPrice: 150
                      datePosted: 1613654161
                      dateModified: 1613654161
                      canShip: true
                      idUser: 3
                    - idItem: 5
                      title: Kaj Stenvalls painting of a famous duck
                      description: Nice painting to keep in a safe somewhere
                      category: Art
                      location: Paris
                      askingPrice: 10000
                      datePosted: 1613340000
                      dateModified: 1613340000
                      canShip: true
                      idUser: 1
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'

              examples:
                get-items-404:
                  value:
                    status: 404
                    message: No items found matching query parameters
      operationId: itemsList
      parameters:
        - schema:
            type: string
          in: query
          name: category
          description: List items of category only
        - schema:
            type: string
          in: query
          name: location
          description: List items by location
        - schema:
            type: integer
          in: query
          name: date
          description: List items posted on date (UNIX epoch)
      description: |-
        List items for sale, the query can be narrowed by category, location or date of item posted.

        Query parameters:
        - category: There are some items prefilled to "database", good categories to test item search/query parameters are `Cars`, `Art` and `Clothing`.
        - location: Prefilled items have locations `Paris`, `Strasborough`, `Oulu`, `Oslo` and `Rovaniemi`
        - date must be supplied in UNIX epoch format, the backend parses the date so that the time does not matter, only date. E.g. `1613844380` is `20.2.2021 20.06.20 +0200` but it will match every item posted on 20.2.2021

        Query parameters are handled as AND, so `?category=clothing&location=ivalo` will list only items that match BOTH parameters.
    parameters: []
    post:
      summary: ''
      operationId: itemsPost
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
              examples:
                post-items-201:
                  value:
                    status: 201
                    message: Item posted succesfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
              examples:
                post-items-400:
                  value:
                    status: 400
                    message: Invalid request
      description: |-
        Post a new item for sale.

        The request body contains a JSON object with the new item's information. `idItem`, `datePosted`, and `dateModified` are generated automatically and are not required. `idUser` is detected from the authorization token.

        Requires a valid JWT token as Bearer token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
            examples:
              post-item-example-1:
                value:
                  title: Men's leather jacket
                  description: 'A suade leather jacket, very good condition. Has been in the cupboard since the 80''s'
                  category: Clothing
                  location: Helsinki
                  askingPrice: 30
                  canShip: true
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Bearer <token>
  '/upload/{idItem}':
    parameters:
      - schema:
          type: string
        name: idItem
        in: path
        required: true
    post:
      summary: Upload images
      operationId: post-upload-idItem
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      description: |-
        Upload a maximum of 4 images of an item. The related item is recognized from the route parameter `idItem`.

        If there are already images posted on the server, they will be overwritten (e.g. two images already posted, and the user uploads 3 images, the old ones will be overwritten and there will be only the 3 new ones posted)

        Requires authentication. A user can only upload images to an item he/she has posted.
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Bearer <token>
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: 'null'
        description: The files to upload as multipart/form-data
components:
  schemas:
    User:
      title: User
      type: object
      x-examples:
        example-1 (password MyPassWord4321):
          idUser: b2xsaS5vc3RhamFAcG9zdGkuY29t
          firstName: Olli
          lastName: Ostaja
          email: olli.ostaja@posti.com
          dateCreated: 1613413844
          dateModified: 1613413844
          tel: '+35881234567'
          password: $2y$10$9nlCG7OwYW9QqE5/Ofd/UeUvvIvArY22BjM7SphFuaXhJ4QYw42je
        example-2 (password salasana1234):
          idUser: bXl5QG15eW50aS5uZXQ=
          firstName: Myy
          lastName: Myyjätär
          email: myy@myynti.net
          dateCreated: 1613413844
          dateModified: 1613500255
          tel: '0505556677'
          password: $2y$10$ZQg5T28.f0/oirjuInEZlefrBVdClfzlan9BqCvoUmaQXITzMExSC
      description: User of bci-market
      properties:
        idUser:
          type: string
          description: 'The unique identifier of the user, automatically generated (base64 encoded email address)'
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          description: Email address of the user
        dateCreated:
          type: integer
          description: 'Creation date of the user (UNIX epoch, automatically generated)'
        dateModified:
          type: integer
          description: 'The date of last modification of the user (UNIX epoch, automatically updated)'
        tel:
          type: string
          description: 'Telephone number of the user (optional, may contain country codes e.g. +358101234567)'
        password:
          type: string
          description: password of the user (hash)
      required:
        - email
    Item:
      title: Item
      type: object
      description: Item for sale
      x-examples:
        example-1:
          idItem: b2xsaS5vc3RhamFAcG9zdGkuY29t
          title: 'Opel Corsa, good condition'
          description: 'Opel Corsa m.y. 1998, must be inspected until the end of the month'
          category: Cars
          location: Rovaniemi
          askingPrice: 200
          datePosted: 1613592071
          dateModified: 1613592071
          canShip: false
          idUser: bXl5QG15eW50aS5uZXQ
      properties:
        idItem:
          type: string
          description: 'The unique identifier of the item, automatically generated (base 64 encoded idUser+description)'
        title:
          type: string
          description: The title of the item for sale
        description:
          type: string
          description: The description of the item
        category:
          type: string
          description: 'Category of the item for sale (cars, clothing, electronics etc.)'
        location:
          type: string
          description: 'The location of the item (city, country etc)'
        askingPrice:
          type: number
          description: The asking price of the item
        datePosted:
          type: integer
          description: Date the item was first posted (UNIX epoch)
        dateModified:
          type: integer
          description: The date the item was last modified (UNIX epoch)
        canShip:
          type: boolean
          description: Whether the seller is willing to ship the item
        idUser:
          type: string
          description: id of the user who posted the item
        images:
          type: array
          description: paths & filenames of images of the item
          items:
            type: string
            maxLength: 4
    Status:
      title: Status
      type: object
      description: A status message with more details about success or failure of a request
      x-examples:
        example-1:
          status: 404
          message: Not Found
      properties:
        status:
          type: integer
        message:
          type: string
